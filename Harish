{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "7iN6_iz-8jTv"
      },
      "outputs": [],
      "source": [
        "# Import required libraries\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import tensorflow as tf\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet\n",
        "from sklearn.metrics import r2_score"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Load the dataset\n",
        "dn = pd.read_csv(\"sam.csv\")"
      ],
      "metadata": {
        "id": "FoIpRgJT8-4P"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dn.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "AhXfD9918-_o",
        "outputId": "3d1c47f8-84df-4dfb-e668-730963c450d0"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Temperature (K)  Luminosity(L/Lo)  Radius(R/Ro)  Absolute magnitude(Mv)  \\\n",
              "0             3068          0.002400        0.1700                   16.12   \n",
              "1             3042          0.000500        0.1542                   16.60   \n",
              "2             2600          0.000300        0.1020                   18.70   \n",
              "3             2800          0.000200        0.1600                   16.65   \n",
              "4             1939          0.000138        0.1030                   20.06   \n",
              "\n",
              "   Star type Star color Spectral Class  \n",
              "0          0        Red              M  \n",
              "1          0        Red              M  \n",
              "2          0        Red              M  \n",
              "3          0        Red              M  \n",
              "4          0        Red              M  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7c13690c-925f-4e29-947d-b4db9d34a2db\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Temperature (K)</th>\n",
              "      <th>Luminosity(L/Lo)</th>\n",
              "      <th>Radius(R/Ro)</th>\n",
              "      <th>Absolute magnitude(Mv)</th>\n",
              "      <th>Star type</th>\n",
              "      <th>Star color</th>\n",
              "      <th>Spectral Class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3068</td>\n",
              "      <td>0.002400</td>\n",
              "      <td>0.1700</td>\n",
              "      <td>16.12</td>\n",
              "      <td>0</td>\n",
              "      <td>Red</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>3042</td>\n",
              "      <td>0.000500</td>\n",
              "      <td>0.1542</td>\n",
              "      <td>16.60</td>\n",
              "      <td>0</td>\n",
              "      <td>Red</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2600</td>\n",
              "      <td>0.000300</td>\n",
              "      <td>0.1020</td>\n",
              "      <td>18.70</td>\n",
              "      <td>0</td>\n",
              "      <td>Red</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2800</td>\n",
              "      <td>0.000200</td>\n",
              "      <td>0.1600</td>\n",
              "      <td>16.65</td>\n",
              "      <td>0</td>\n",
              "      <td>Red</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1939</td>\n",
              "      <td>0.000138</td>\n",
              "      <td>0.1030</td>\n",
              "      <td>20.06</td>\n",
              "      <td>0</td>\n",
              "      <td>Red</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7c13690c-925f-4e29-947d-b4db9d34a2db')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-7c13690c-925f-4e29-947d-b4db9d34a2db button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-7c13690c-925f-4e29-947d-b4db9d34a2db');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Split the dataset into input and output variables\n",
        "X = dn.drop(['Star type', 'Star color', 'Spectral Class'], axis=1)\n",
        "y = dn['Star type']"
      ],
      "metadata": {
        "id": "DMkLfgXP9Kvv"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Split the dataset into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)"
      ],
      "metadata": {
        "id": "FUGVnvD39SaP"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Scale the input variables\n",
        "scaler = StandardScaler()\n",
        "X_train = scaler.fit_transform(X_train)\n",
        "X_test = scaler.transform(X_test)"
      ],
      "metadata": {
        "id": "tLWEX7qP9VXN"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a Linear Regression model\n",
        "linear_reg = LinearRegression()\n",
        "linear_reg.fit(X_train, y_train)\n",
        "linear_reg_y_pred = linear_reg.predict(X_test)"
      ],
      "metadata": {
        "id": "0sIrzSwP9a9L"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a Ridge Regression model\n",
        "ridge_reg = Ridge(alpha=0.5)\n",
        "ridge_reg.fit(X_train, y_train)\n",
        "ridge_reg_y_pred = ridge_reg.predict(X_test)"
      ],
      "metadata": {
        "id": "PjL_VESC9dqX"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a Lasso Regression model\n",
        "lasso_reg = Lasso(alpha=0.5)\n",
        "lasso_reg.fit(X_train, y_train)\n",
        "lasso_reg_y_pred = lasso_reg.predict(X_test)"
      ],
      "metadata": {
        "id": "00VSveKY9gp1"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create an Elastic Net Regression model\n",
        "elastic_net_reg = ElasticNet(alpha=0.5, l1_ratio=0.5)\n",
        "elastic_net_reg.fit(X_train, y_train)\n",
        "elastic_net_reg_y_pred = elastic_net_reg.predict(X_test)"
      ],
      "metadata": {
        "id": "P4aO_O5R9jo-"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create an ANN model with one hidden layer\n",
        "ann_model = tf.keras.models.Sequential([\n",
        "    tf.keras.layers.Dense(6, activation='relu', input_shape=[len(X_train[0])]),\n",
        "    tf.keras.layers.Dense(1)\n",
        "])"
      ],
      "metadata": {
        "id": "6U6PvidO9md3"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Compile the model with Mean Squared Error loss and Adam optimizer\n",
        "ann_model.compile(loss='mse', optimizer='adam')"
      ],
      "metadata": {
        "id": "oIAVscfO9o5x"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Fit the model to the training data\n",
        "ann_history = ann_model.fit(X_train, y_train, epochs=100, validation_data=(X_test, y_test))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xr1dPOy49rzG",
        "outputId": "023be6c4-5bc3-48f7-a2b2-328565d436bd"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/100\n",
            "6/6 [==============================] - 1s 38ms/step - loss: 9.4227 - val_loss: 8.9092\n",
            "Epoch 2/100\n",
            "6/6 [==============================] - 0s 12ms/step - loss: 9.2026 - val_loss: 8.6958\n",
            "Epoch 3/100\n",
            "6/6 [==============================] - 0s 12ms/step - loss: 8.9847 - val_loss: 8.4872\n",
            "Epoch 4/100\n",
            "6/6 [==============================] - 0s 12ms/step - loss: 8.7783 - val_loss: 8.2822\n",
            "Epoch 5/100\n",
            "6/6 [==============================] - 0s 9ms/step - loss: 8.5747 - val_loss: 8.0846\n",
            "Epoch 6/100\n",
            "6/6 [==============================] - 0s 8ms/step - loss: 8.3692 - val_loss: 7.8885\n",
            "Epoch 7/100\n",
            "6/6 [==============================] - 0s 10ms/step - loss: 8.1735 - val_loss: 7.6920\n",
            "Epoch 8/100\n",
            "6/6 [==============================] - 0s 11ms/step - loss: 7.9768 - val_loss: 7.4994\n",
            "Epoch 9/100\n",
            "6/6 [==============================] - 0s 8ms/step - loss: 7.7879 - val_loss: 7.3095\n",
            "Epoch 10/100\n",
            "6/6 [==============================] - 0s 12ms/step - loss: 7.5943 - val_loss: 7.1241\n",
            "Epoch 11/100\n",
            "6/6 [==============================] - 0s 11ms/step - loss: 7.4163 - val_loss: 6.9370\n",
            "Epoch 12/100\n",
            "6/6 [==============================] - 0s 8ms/step - loss: 7.2232 - val_loss: 6.7583\n",
            "Epoch 13/100\n",
            "6/6 [==============================] - 0s 12ms/step - loss: 7.0438 - val_loss: 6.5819\n",
            "Epoch 14/100\n",
            "6/6 [==============================] - 0s 16ms/step - loss: 6.8651 - val_loss: 6.4081\n",
            "Epoch 15/100\n",
            "6/6 [==============================] - 0s 15ms/step - loss: 6.6882 - val_loss: 6.2373\n",
            "Epoch 16/100\n",
            "6/6 [==============================] - 0s 11ms/step - loss: 6.5153 - val_loss: 6.0673\n",
            "Epoch 17/100\n",
            "6/6 [==============================] - 0s 15ms/step - loss: 6.3387 - val_loss: 5.9012\n",
            "Epoch 18/100\n",
            "6/6 [==============================] - 0s 15ms/step - loss: 6.1655 - val_loss: 5.7377\n",
            "Epoch 19/100\n",
            "6/6 [==============================] - 0s 15ms/step - loss: 5.9988 - val_loss: 5.5751\n",
            "Epoch 20/100\n",
            "6/6 [==============================] - 0s 14ms/step - loss: 5.8298 - val_loss: 5.4156\n",
            "Epoch 21/100\n",
            "6/6 [==============================] - 0s 14ms/step - loss: 5.6619 - val_loss: 5.2600\n",
            "Epoch 22/100\n",
            "6/6 [==============================] - 0s 19ms/step - loss: 5.5016 - val_loss: 5.1040\n",
            "Epoch 23/100\n",
            "6/6 [==============================] - 0s 16ms/step - loss: 5.3383 - val_loss: 4.9513\n",
            "Epoch 24/100\n",
            "6/6 [==============================] - 0s 14ms/step - loss: 5.1756 - val_loss: 4.8051\n",
            "Epoch 25/100\n",
            "6/6 [==============================] - 0s 12ms/step - loss: 5.0234 - val_loss: 4.6596\n",
            "Epoch 26/100\n",
            "6/6 [==============================] - 0s 11ms/step - loss: 4.8753 - val_loss: 4.5160\n",
            "Epoch 27/100\n",
            "6/6 [==============================] - 0s 11ms/step - loss: 4.7178 - val_loss: 4.3812\n",
            "Epoch 28/100\n",
            "6/6 [==============================] - 0s 12ms/step - loss: 4.5739 - val_loss: 4.2485\n",
            "Epoch 29/100\n",
            "6/6 [==============================] - 0s 11ms/step - loss: 4.4371 - val_loss: 4.1172\n",
            "Epoch 30/100\n",
            "6/6 [==============================] - 0s 11ms/step - loss: 4.2969 - val_loss: 3.9912\n",
            "Epoch 31/100\n",
            "6/6 [==============================] - 0s 12ms/step - loss: 4.1596 - val_loss: 3.8708\n",
            "Epoch 32/100\n",
            "6/6 [==============================] - 0s 17ms/step - loss: 4.0333 - val_loss: 3.7540\n",
            "Epoch 33/100\n",
            "6/6 [==============================] - 0s 12ms/step - loss: 3.9098 - val_loss: 3.6404\n",
            "Epoch 34/100\n",
            "6/6 [==============================] - 0s 12ms/step - loss: 3.7861 - val_loss: 3.5324\n",
            "Epoch 35/100\n",
            "6/6 [==============================] - 0s 14ms/step - loss: 3.6664 - val_loss: 3.4293\n",
            "Epoch 36/100\n",
            "6/6 [==============================] - 0s 14ms/step - loss: 3.5549 - val_loss: 3.3287\n",
            "Epoch 37/100\n",
            "6/6 [==============================] - 0s 14ms/step - loss: 3.4384 - val_loss: 3.2348\n",
            "Epoch 38/100\n",
            "6/6 [==============================] - 0s 16ms/step - loss: 3.3346 - val_loss: 3.1428\n",
            "Epoch 39/100\n",
            "6/6 [==============================] - 0s 13ms/step - loss: 3.2321 - val_loss: 3.0540\n",
            "Epoch 40/100\n",
            "6/6 [==============================] - 0s 15ms/step - loss: 3.1288 - val_loss: 2.9700\n",
            "Epoch 41/100\n",
            "6/6 [==============================] - 0s 11ms/step - loss: 3.0367 - val_loss: 2.8873\n",
            "Epoch 42/100\n",
            "6/6 [==============================] - 0s 11ms/step - loss: 2.9386 - val_loss: 2.8099\n",
            "Epoch 43/100\n",
            "6/6 [==============================] - 0s 12ms/step - loss: 2.8536 - val_loss: 2.7336\n",
            "Epoch 44/100\n",
            "6/6 [==============================] - 0s 15ms/step - loss: 2.7644 - val_loss: 2.6625\n",
            "Epoch 45/100\n",
            "6/6 [==============================] - 0s 11ms/step - loss: 2.6821 - val_loss: 2.5941\n",
            "Epoch 46/100\n",
            "6/6 [==============================] - 0s 15ms/step - loss: 2.6014 - val_loss: 2.5290\n",
            "Epoch 47/100\n",
            "6/6 [==============================] - 0s 14ms/step - loss: 2.5262 - val_loss: 2.4664\n",
            "Epoch 48/100\n",
            "6/6 [==============================] - 0s 10ms/step - loss: 2.4558 - val_loss: 2.4060\n",
            "Epoch 49/100\n",
            "6/6 [==============================] - 0s 13ms/step - loss: 2.3857 - val_loss: 2.3484\n",
            "Epoch 50/100\n",
            "6/6 [==============================] - 0s 9ms/step - loss: 2.3168 - val_loss: 2.2948\n",
            "Epoch 51/100\n",
            "6/6 [==============================] - 0s 8ms/step - loss: 2.2567 - val_loss: 2.2429\n",
            "Epoch 52/100\n",
            "6/6 [==============================] - 0s 11ms/step - loss: 2.1961 - val_loss: 2.1935\n",
            "Epoch 53/100\n",
            "6/6 [==============================] - 0s 9ms/step - loss: 2.1376 - val_loss: 2.1465\n",
            "Epoch 54/100\n",
            "6/6 [==============================] - 0s 9ms/step - loss: 2.0796 - val_loss: 2.1029\n",
            "Epoch 55/100\n",
            "6/6 [==============================] - 0s 8ms/step - loss: 2.0270 - val_loss: 2.0611\n",
            "Epoch 56/100\n",
            "6/6 [==============================] - 0s 8ms/step - loss: 1.9764 - val_loss: 2.0208\n",
            "Epoch 57/100\n",
            "6/6 [==============================] - 0s 8ms/step - loss: 1.9328 - val_loss: 1.9805\n",
            "Epoch 58/100\n",
            "6/6 [==============================] - 0s 8ms/step - loss: 1.8841 - val_loss: 1.9429\n",
            "Epoch 59/100\n",
            "6/6 [==============================] - 0s 8ms/step - loss: 1.8380 - val_loss: 1.9065\n",
            "Epoch 60/100\n",
            "6/6 [==============================] - 0s 12ms/step - loss: 1.7945 - val_loss: 1.8710\n",
            "Epoch 61/100\n",
            "6/6 [==============================] - 0s 9ms/step - loss: 1.7538 - val_loss: 1.8359\n",
            "Epoch 62/100\n",
            "6/6 [==============================] - 0s 8ms/step - loss: 1.7123 - val_loss: 1.8012\n",
            "Epoch 63/100\n",
            "6/6 [==============================] - 0s 12ms/step - loss: 1.6722 - val_loss: 1.7679\n",
            "Epoch 64/100\n",
            "6/6 [==============================] - 0s 8ms/step - loss: 1.6350 - val_loss: 1.7351\n",
            "Epoch 65/100\n",
            "6/6 [==============================] - 0s 8ms/step - loss: 1.5973 - val_loss: 1.7038\n",
            "Epoch 66/100\n",
            "6/6 [==============================] - 0s 10ms/step - loss: 1.5626 - val_loss: 1.6738\n",
            "Epoch 67/100\n",
            "6/6 [==============================] - 0s 8ms/step - loss: 1.5307 - val_loss: 1.6443\n",
            "Epoch 68/100\n",
            "6/6 [==============================] - 0s 9ms/step - loss: 1.4961 - val_loss: 1.6158\n",
            "Epoch 69/100\n",
            "6/6 [==============================] - 0s 12ms/step - loss: 1.4672 - val_loss: 1.5873\n",
            "Epoch 70/100\n",
            "6/6 [==============================] - 0s 9ms/step - loss: 1.4342 - val_loss: 1.5597\n",
            "Epoch 71/100\n",
            "6/6 [==============================] - 0s 12ms/step - loss: 1.4065 - val_loss: 1.5325\n",
            "Epoch 72/100\n",
            "6/6 [==============================] - 0s 11ms/step - loss: 1.3772 - val_loss: 1.5058\n",
            "Epoch 73/100\n",
            "6/6 [==============================] - 0s 12ms/step - loss: 1.3502 - val_loss: 1.4794\n",
            "Epoch 74/100\n",
            "6/6 [==============================] - 0s 8ms/step - loss: 1.3215 - val_loss: 1.4533\n",
            "Epoch 75/100\n",
            "6/6 [==============================] - 0s 12ms/step - loss: 1.2955 - val_loss: 1.4276\n",
            "Epoch 76/100\n",
            "6/6 [==============================] - 0s 12ms/step - loss: 1.2698 - val_loss: 1.4018\n",
            "Epoch 77/100\n",
            "6/6 [==============================] - 0s 9ms/step - loss: 1.2432 - val_loss: 1.3766\n",
            "Epoch 78/100\n",
            "6/6 [==============================] - 0s 9ms/step - loss: 1.2184 - val_loss: 1.3515\n",
            "Epoch 79/100\n",
            "6/6 [==============================] - 0s 13ms/step - loss: 1.1958 - val_loss: 1.3262\n",
            "Epoch 80/100\n",
            "6/6 [==============================] - 0s 8ms/step - loss: 1.1700 - val_loss: 1.3003\n",
            "Epoch 81/100\n",
            "6/6 [==============================] - 0s 11ms/step - loss: 1.1465 - val_loss: 1.2758\n",
            "Epoch 82/100\n",
            "6/6 [==============================] - 0s 10ms/step - loss: 1.1237 - val_loss: 1.2512\n",
            "Epoch 83/100\n",
            "6/6 [==============================] - 0s 9ms/step - loss: 1.1005 - val_loss: 1.2270\n",
            "Epoch 84/100\n",
            "6/6 [==============================] - 0s 12ms/step - loss: 1.0789 - val_loss: 1.2025\n",
            "Epoch 85/100\n",
            "6/6 [==============================] - 0s 9ms/step - loss: 1.0568 - val_loss: 1.1781\n",
            "Epoch 86/100\n",
            "6/6 [==============================] - 0s 12ms/step - loss: 1.0347 - val_loss: 1.1540\n",
            "Epoch 87/100\n",
            "6/6 [==============================] - 0s 8ms/step - loss: 1.0144 - val_loss: 1.1308\n",
            "Epoch 88/100\n",
            "6/6 [==============================] - 0s 8ms/step - loss: 0.9932 - val_loss: 1.1075\n",
            "Epoch 89/100\n",
            "6/6 [==============================] - 0s 8ms/step - loss: 0.9734 - val_loss: 1.0845\n",
            "Epoch 90/100\n",
            "6/6 [==============================] - 0s 11ms/step - loss: 0.9542 - val_loss: 1.0612\n",
            "Epoch 91/100\n",
            "6/6 [==============================] - 0s 12ms/step - loss: 0.9348 - val_loss: 1.0391\n",
            "Epoch 92/100\n",
            "6/6 [==============================] - 0s 8ms/step - loss: 0.9162 - val_loss: 1.0177\n",
            "Epoch 93/100\n",
            "6/6 [==============================] - 0s 9ms/step - loss: 0.8979 - val_loss: 0.9964\n",
            "Epoch 94/100\n",
            "6/6 [==============================] - 0s 12ms/step - loss: 0.8798 - val_loss: 0.9749\n",
            "Epoch 95/100\n",
            "6/6 [==============================] - 0s 12ms/step - loss: 0.8625 - val_loss: 0.9543\n",
            "Epoch 96/100\n",
            "6/6 [==============================] - 0s 13ms/step - loss: 0.8449 - val_loss: 0.9340\n",
            "Epoch 97/100\n",
            "6/6 [==============================] - 0s 8ms/step - loss: 0.8287 - val_loss: 0.9135\n",
            "Epoch 98/100\n",
            "6/6 [==============================] - 0s 12ms/step - loss: 0.8124 - val_loss: 0.8941\n",
            "Epoch 99/100\n",
            "6/6 [==============================] - 0s 8ms/step - loss: 0.7956 - val_loss: 0.8745\n",
            "Epoch 100/100\n",
            "6/6 [==============================] - 0s 9ms/step - loss: 0.7807 - val_loss: 0.8555\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Predict the star type for the test data\n",
        "ann_y_pred = ann_model.predict(X_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S-WhjIkt9yx_",
        "outputId": "3ee2028e-6d14-4a2a-810b-f57e60e84da8"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2/2 [==============================] - 0s 7ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Evaluate the models' accuracy using R-squared\n",
        "linear_reg_accuracy = r2_score(y_test, linear_reg_y_pred)\n",
        "ridge_reg_accuracy = r2_score(y_test, ridge_reg_y_pred)\n",
        "lasso_reg_accuracy = r2_score(y_test, lasso_reg_y_pred)\n",
        "elastic_net_reg_accuracy = r2_score(y_test, elastic_net_reg_y_pred)\n",
        "ann_accuracy = r2_score(y_test, ann_y_pred)"
      ],
      "metadata": {
        "id": "e6LyAlkm92rU"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Print the R-squared scores for each model\n",
        "print('Linear Regression Accuracy: ', linear_reg_accuracy)\n",
        "print('Ridge Regression Accuracy: ', ridge_reg_accuracy)\n",
        "print('Lasso Regression Accuracy: ', lasso_reg_accuracy)\n",
        "print('Elastic Net Regression Accuracy: ', elastic_net_reg_accuracy)\n",
        "print('ANN Accuracy: ', ann_accuracy)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aGxIUsbH-LzT",
        "outputId": "94e5aad8-e30d-4a84-ad52-6c8e0fc898a1"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Linear Regression Accuracy:  0.9307702007352064\n",
            "Ridge Regression Accuracy:  0.9310402682270373\n",
            "Lasso Regression Accuracy:  0.8427702927903591\n",
            "Elastic Net Regression Accuracy:  0.8466923480484324\n",
            "ANN Accuracy:  0.6840638717387862\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Plot the ANN model's accuracy and loss curves\n",
        "plt.figure(figsize=(8,6))\n",
        "plt.plot(ann_history.history['loss'], label='Training Loss')\n",
        "plt.plot(ann_history.history['val_loss'], label='Validation Loss')\n",
        "plt.title('ANN Loss Curves')\n",
        "plt.xlabel('Epoch')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 404
        },
        "id": "buH25FZ0-RX1",
        "outputId": "c321cfab-8d7f-42a3-a0f8-a76e6507cdb8"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x432 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Plot the predicted star types vs the actual star types for the ANN model\n",
        "plt.figure(figsize=(8,6))\n",
        "plt.scatter(y_test, ann_y_pred, color='blue')\n",
        "plt.title('ANN Predicted vs Actual Star Types')\n",
        "plt.xlabel('Actual Star Type')\n",
        "plt.ylabel('Predicted Star Type')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 404
        },
        "id": "YUI5dXeC-WNo",
        "outputId": "3e0b273e-7067-4e6c-90e4-f2dcb7d68d34"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x432 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}
